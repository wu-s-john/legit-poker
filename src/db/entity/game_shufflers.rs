//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.16

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Copy, Clone, Default, Debug, DeriveEntity)]
pub struct Entity;

impl EntityName for Entity {
    fn schema_name(&self) -> Option<&str> {
        Some("public")
    }
    fn table_name(&self) -> &str {
        "game_shufflers"
    }
}

#[derive(Clone, Debug, PartialEq, DeriveModel, DeriveActiveModel, Eq, Serialize, Deserialize)]
pub struct Model {
    pub game_id: i64,
    pub shuffler_id: i64,
    pub public_key: Vec<u8>,
    pub joined_at: TimeDateTimeWithTimeZone,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveColumn)]
pub enum Column {
    GameId,
    ShufflerId,
    PublicKey,
    JoinedAt,
}

#[derive(Copy, Clone, Debug, EnumIter, DerivePrimaryKey)]
pub enum PrimaryKey {
    GameId,
    ShufflerId,
}

impl PrimaryKeyTrait for PrimaryKey {
    type ValueType = (i64, i64);
    fn auto_increment() -> bool {
        false
    }
}

#[derive(Copy, Clone, Debug, EnumIter)]
pub enum Relation {
    Games,
    Shufflers,
}

impl ColumnTrait for Column {
    type EntityName = Entity;
    fn def(&self) -> ColumnDef {
        match self {
            Self::GameId => ColumnType::BigInteger.def(),
            Self::ShufflerId => ColumnType::BigInteger.def(),
            Self::PublicKey => ColumnType::VarBinary(StringLen::None).def(),
            Self::JoinedAt => ColumnType::TimestampWithTimeZone.def(),
        }
    }
}

impl RelationTrait for Relation {
    fn def(&self) -> RelationDef {
        match self {
            Self::Games => Entity::belongs_to(super::games::Entity)
                .from(Column::GameId)
                .to(super::games::Column::Id)
                .into(),
            Self::Shufflers => Entity::belongs_to(super::shufflers::Entity)
                .from(Column::ShufflerId)
                .to(super::shufflers::Column::Id)
                .into(),
        }
    }
}

impl Related<super::games::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Games.def()
    }
}

impl Related<super::shufflers::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Shufflers.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
