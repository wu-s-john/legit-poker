//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.16

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Copy, Clone, Default, Debug, DeriveEntity)]
pub struct Entity;

impl EntityName for Entity {
    fn schema_name(&self) -> Option<&str> {
        Some("public")
    }
    fn table_name(&self) -> &str {
        "hand_configs"
    }
}

#[derive(Clone, Debug, PartialEq, DeriveModel, DeriveActiveModel, Eq, Serialize, Deserialize)]
pub struct Model {
    pub id: i64,
    pub game_id: i64,
    pub small_blind: i64,
    pub big_blind: i64,
    pub ante: i64,
    pub button_seat: i16,
    pub small_blind_seat: i16,
    pub big_blind_seat: i16,
    pub check_raise_allowed: bool,
    pub created_at: TimeDateTimeWithTimeZone,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveColumn)]
pub enum Column {
    Id,
    GameId,
    SmallBlind,
    BigBlind,
    Ante,
    ButtonSeat,
    SmallBlindSeat,
    BigBlindSeat,
    CheckRaiseAllowed,
    CreatedAt,
}

#[derive(Copy, Clone, Debug, EnumIter, DerivePrimaryKey)]
pub enum PrimaryKey {
    Id,
}

impl PrimaryKeyTrait for PrimaryKey {
    type ValueType = i64;
    fn auto_increment() -> bool {
        true
    }
}

#[derive(Copy, Clone, Debug, EnumIter)]
pub enum Relation {
    Games,
    TableSnapshots,
}

impl ColumnTrait for Column {
    type EntityName = Entity;
    fn def(&self) -> ColumnDef {
        match self {
            Self::Id => ColumnType::BigInteger.def(),
            Self::GameId => ColumnType::BigInteger.def(),
            Self::SmallBlind => ColumnType::BigInteger.def(),
            Self::BigBlind => ColumnType::BigInteger.def(),
            Self::Ante => ColumnType::BigInteger.def(),
            Self::ButtonSeat => ColumnType::SmallInteger.def(),
            Self::SmallBlindSeat => ColumnType::SmallInteger.def(),
            Self::BigBlindSeat => ColumnType::SmallInteger.def(),
            Self::CheckRaiseAllowed => ColumnType::Boolean.def(),
            Self::CreatedAt => ColumnType::TimestampWithTimeZone.def(),
        }
    }
}

impl RelationTrait for Relation {
    fn def(&self) -> RelationDef {
        match self {
            Self::Games => Entity::belongs_to(super::games::Entity)
                .from(Column::GameId)
                .to(super::games::Column::Id)
                .into(),
            Self::TableSnapshots => Entity::has_many(super::table_snapshots::Entity).into(),
        }
    }
}

impl Related<super::games::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Games.def()
    }
}

impl Related<super::table_snapshots::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::TableSnapshots.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
