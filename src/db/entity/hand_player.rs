//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.16

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Copy, Clone, Default, Debug, DeriveEntity)]
pub struct Entity;

impl EntityName for Entity {
    fn schema_name(&self) -> Option<&str> {
        Some("public")
    }
    fn table_name(&self) -> &str {
        "hand_player"
    }
}

#[derive(Clone, Debug, PartialEq, DeriveModel, DeriveActiveModel, Eq, Serialize, Deserialize)]
pub struct Model {
    pub id: i64,
    pub game_id: i64,
    pub hand_id: i64,
    pub player_id: i64,
    pub seat: i16,
    pub nonce: i64,
    pub joined_at: TimeDateTimeWithTimeZone,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveColumn)]
pub enum Column {
    Id,
    GameId,
    HandId,
    PlayerId,
    Seat,
    Nonce,
    JoinedAt,
}

#[derive(Copy, Clone, Debug, EnumIter, DerivePrimaryKey)]
pub enum PrimaryKey {
    Id,
}

impl PrimaryKeyTrait for PrimaryKey {
    type ValueType = i64;
    fn auto_increment() -> bool {
        true
    }
}

#[derive(Copy, Clone, Debug, EnumIter)]
pub enum Relation {
    GamePlayers,
    Games,
    Hands,
    Players,
}

impl ColumnTrait for Column {
    type EntityName = Entity;
    fn def(&self) -> ColumnDef {
        match self {
            Self::Id => ColumnType::BigInteger.def(),
            Self::GameId => ColumnType::BigInteger.def(),
            Self::HandId => ColumnType::BigInteger.def(),
            Self::PlayerId => ColumnType::BigInteger.def(),
            Self::Seat => ColumnType::SmallInteger.def(),
            Self::Nonce => ColumnType::BigInteger.def(),
            Self::JoinedAt => ColumnType::TimestampWithTimeZone.def(),
        }
    }
}

impl RelationTrait for Relation {
    fn def(&self) -> RelationDef {
        match self {
            Self::GamePlayers => Entity::belongs_to(super::game_players::Entity)
                .from((Column::GameId, Column::PlayerId))
                .to((
                    super::game_players::Column::GameId,
                    super::game_players::Column::PlayerId,
                ))
                .into(),
            Self::Games => Entity::belongs_to(super::games::Entity)
                .from(Column::GameId)
                .to(super::games::Column::Id)
                .into(),
            Self::Hands => Entity::belongs_to(super::hands::Entity)
                .from(Column::HandId)
                .to(super::hands::Column::Id)
                .into(),
            Self::Players => Entity::belongs_to(super::players::Entity)
                .from(Column::PlayerId)
                .to(super::players::Column::Id)
                .into(),
        }
    }
}

impl Related<super::game_players::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::GamePlayers.def()
    }
}

impl Related<super::games::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Games.def()
    }
}

impl Related<super::hands::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Hands.def()
    }
}

impl Related<super::players::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Players.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
