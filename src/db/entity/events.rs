//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.16

use super::sea_orm_active_enums::EventPhase;
use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Copy, Clone, Default, Debug, DeriveEntity)]
pub struct Entity;

impl EntityName for Entity {
    fn schema_name(&self) -> Option<&str> {
        Some("public")
    }
    fn table_name(&self) -> &str {
        "events"
    }
}

#[derive(Clone, Debug, PartialEq, DeriveModel, DeriveActiveModel, Eq, Serialize, Deserialize)]
pub struct Model {
    pub id: i64,
    pub game_id: i64,
    pub hand_id: i64,
    pub entity_kind: i16,
    pub entity_id: i64,
    pub actor_kind: i16,
    pub seat_id: Option<i16>,
    pub shuffler_id: Option<i16>,
    pub public_key: Vec<u8>,
    pub nonce: i64,
    pub phase: EventPhase,
    pub snapshot_number: i32,
    pub is_successful: bool,
    pub failure_message: Option<String>,
    pub resulting_phase: EventPhase,
    pub message_type: String,
    pub payload: Json,
    pub signature: Vec<u8>,
    pub inserted_at: TimeDateTimeWithTimeZone,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveColumn)]
pub enum Column {
    Id,
    GameId,
    HandId,
    EntityKind,
    EntityId,
    ActorKind,
    SeatId,
    ShufflerId,
    PublicKey,
    Nonce,
    Phase,
    SnapshotNumber,
    IsSuccessful,
    FailureMessage,
    ResultingPhase,
    MessageType,
    Payload,
    Signature,
    InsertedAt,
}

#[derive(Copy, Clone, Debug, EnumIter, DerivePrimaryKey)]
pub enum PrimaryKey {
    Id,
}

impl PrimaryKeyTrait for PrimaryKey {
    type ValueType = i64;
    fn auto_increment() -> bool {
        true
    }
}

#[derive(Copy, Clone, Debug, EnumIter)]
pub enum Relation {
    Games,
    Hands,
    Phases,
}

impl ColumnTrait for Column {
    type EntityName = Entity;
    fn def(&self) -> ColumnDef {
        match self {
            Self::Id => ColumnType::BigInteger.def(),
            Self::GameId => ColumnType::BigInteger.def(),
            Self::HandId => ColumnType::BigInteger.def(),
            Self::EntityKind => ColumnType::SmallInteger.def(),
            Self::EntityId => ColumnType::BigInteger.def(),
            Self::ActorKind => ColumnType::SmallInteger.def(),
            Self::SeatId => ColumnType::SmallInteger.def().null(),
            Self::ShufflerId => ColumnType::SmallInteger.def().null(),
            Self::PublicKey => ColumnType::VarBinary(StringLen::None).def(),
            Self::Nonce => ColumnType::BigInteger.def(),
            Self::Phase => EventPhase::db_type().get_column_type().to_owned().def(),
            Self::SnapshotNumber => ColumnType::Integer.def(),
            Self::IsSuccessful => ColumnType::Boolean.def(),
            Self::FailureMessage => ColumnType::Text.def().null(),
            Self::ResultingPhase => EventPhase::db_type().get_column_type().to_owned().def(),
            Self::MessageType => ColumnType::Text.def(),
            Self::Payload => ColumnType::JsonBinary.def(),
            Self::Signature => ColumnType::VarBinary(StringLen::None).def(),
            Self::InsertedAt => ColumnType::TimestampWithTimeZone.def(),
        }
    }
}

impl RelationTrait for Relation {
    fn def(&self) -> RelationDef {
        match self {
            Self::Games => Entity::belongs_to(super::games::Entity)
                .from(Column::GameId)
                .to(super::games::Column::Id)
                .into(),
            Self::Hands => Entity::belongs_to(super::hands::Entity)
                .from(Column::HandId)
                .to(super::hands::Column::Id)
                .into(),
            Self::Phases => Entity::has_many(super::phases::Entity).into(),
        }
    }
}

impl Related<super::games::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Games.def()
    }
}

impl Related<super::hands::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Hands.def()
    }
}

impl Related<super::phases::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Phases.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
