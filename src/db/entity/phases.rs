//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.16

use super::sea_orm_active_enums::PhaseKind;
use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Copy, Clone, Default, Debug, DeriveEntity)]
pub struct Entity;

impl EntityName for Entity {
    fn schema_name(&self) -> Option<&str> {
        Some("public")
    }
    fn table_name(&self) -> &str {
        "phases"
    }
}

#[derive(Clone, Debug, PartialEq, DeriveModel, DeriveActiveModel, Eq, Serialize, Deserialize)]
pub struct Model {
    pub hash: Vec<u8>,
    pub phase_type: PhaseKind,
    pub payload: Json,
    pub message_id: Option<i64>,
    pub created_at: TimeDateTimeWithTimeZone,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveColumn)]
pub enum Column {
    Hash,
    PhaseType,
    Payload,
    MessageId,
    CreatedAt,
}

#[derive(Copy, Clone, Debug, EnumIter, DerivePrimaryKey)]
pub enum PrimaryKey {
    Hash,
}

impl PrimaryKeyTrait for PrimaryKey {
    type ValueType = Vec<u8>;
    fn auto_increment() -> bool {
        false
    }
}

#[derive(Copy, Clone, Debug, EnumIter)]
pub enum Relation {
    Events,
}

impl ColumnTrait for Column {
    type EntityName = Entity;
    fn def(&self) -> ColumnDef {
        match self {
            Self::Hash => ColumnType::VarBinary(StringLen::None).def(),
            Self::PhaseType => PhaseKind::db_type().get_column_type().to_owned().def(),
            Self::Payload => ColumnType::JsonBinary.def(),
            Self::MessageId => ColumnType::BigInteger.def().null(),
            Self::CreatedAt => ColumnType::TimestampWithTimeZone.def(),
        }
    }
}

impl RelationTrait for Relation {
    fn def(&self) -> RelationDef {
        match self {
            Self::Events => Entity::belongs_to(super::events::Entity)
                .from(Column::MessageId)
                .to(super::events::Column::Id)
                .into(),
        }
    }
}

impl Related<super::events::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Events.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
