//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.16

use super::sea_orm_active_enums::ApplicationStatus;
use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Copy, Clone, Default, Debug, DeriveEntity)]
pub struct Entity;

impl EntityName for Entity {
    fn schema_name(&self) -> Option<&str> {
        Some("public")
    }
    fn table_name(&self) -> &str {
        "table_snapshots"
    }
}

#[derive(Clone, Debug, PartialEq, DeriveModel, DeriveActiveModel, Eq, Serialize, Deserialize)]
pub struct Model {
    pub snapshot_hash: Vec<u8>,
    pub game_id: i64,
    pub hand_id: i64,
    pub sequence: i32,
    pub state_hash: Vec<u8>,
    pub previous_hash: Option<Vec<u8>>,
    pub hand_config_id: Option<i64>,
    pub player_stacks: Json,
    pub shuffling_hash: Option<Vec<u8>>,
    pub dealing_hash: Option<Vec<u8>>,
    pub betting_hash: Option<Vec<u8>>,
    pub reveals_hash: Option<Vec<u8>>,
    pub created_at: TimeDateTimeWithTimeZone,
    pub application_status: ApplicationStatus,
    pub failure_reason: Option<String>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveColumn)]
pub enum Column {
    SnapshotHash,
    GameId,
    HandId,
    Sequence,
    StateHash,
    PreviousHash,
    HandConfigId,
    PlayerStacks,
    ShufflingHash,
    DealingHash,
    BettingHash,
    RevealsHash,
    CreatedAt,
    ApplicationStatus,
    FailureReason,
}

#[derive(Copy, Clone, Debug, EnumIter, DerivePrimaryKey)]
pub enum PrimaryKey {
    SnapshotHash,
}

impl PrimaryKeyTrait for PrimaryKey {
    type ValueType = Vec<u8>;
    fn auto_increment() -> bool {
        false
    }
}

#[derive(Copy, Clone, Debug, EnumIter)]
pub enum Relation {
    Games,
    HandConfigs,
    Hands,
    Phases4,
    Phases3,
    Phases2,
    Phases1,
    SelfRef,
}

impl ColumnTrait for Column {
    type EntityName = Entity;
    fn def(&self) -> ColumnDef {
        match self {
            Self::SnapshotHash => ColumnType::VarBinary(StringLen::None).def(),
            Self::GameId => ColumnType::BigInteger.def(),
            Self::HandId => ColumnType::BigInteger.def(),
            Self::Sequence => ColumnType::Integer.def(),
            Self::StateHash => ColumnType::VarBinary(StringLen::None).def(),
            Self::PreviousHash => ColumnType::VarBinary(StringLen::None).def().null(),
            Self::HandConfigId => ColumnType::BigInteger.def().null(),
            Self::PlayerStacks => ColumnType::JsonBinary.def(),
            Self::ShufflingHash => ColumnType::VarBinary(StringLen::None).def().null(),
            Self::DealingHash => ColumnType::VarBinary(StringLen::None).def().null(),
            Self::BettingHash => ColumnType::VarBinary(StringLen::None).def().null(),
            Self::RevealsHash => ColumnType::VarBinary(StringLen::None).def().null(),
            Self::CreatedAt => ColumnType::TimestampWithTimeZone.def(),
            Self::ApplicationStatus => ApplicationStatus::db_type()
                .get_column_type()
                .to_owned()
                .def(),
            Self::FailureReason => ColumnType::Text.def().null(),
        }
    }
}

impl RelationTrait for Relation {
    fn def(&self) -> RelationDef {
        match self {
            Self::Games => Entity::belongs_to(super::games::Entity)
                .from(Column::GameId)
                .to(super::games::Column::Id)
                .into(),
            Self::HandConfigs => Entity::belongs_to(super::hand_configs::Entity)
                .from(Column::HandConfigId)
                .to(super::hand_configs::Column::Id)
                .into(),
            Self::Hands => Entity::belongs_to(super::hands::Entity)
                .from(Column::HandId)
                .to(super::hands::Column::Id)
                .into(),
            Self::Phases4 => Entity::belongs_to(super::phases::Entity)
                .from(Column::BettingHash)
                .to(super::phases::Column::Hash)
                .into(),
            Self::Phases3 => Entity::belongs_to(super::phases::Entity)
                .from(Column::DealingHash)
                .to(super::phases::Column::Hash)
                .into(),
            Self::Phases2 => Entity::belongs_to(super::phases::Entity)
                .from(Column::RevealsHash)
                .to(super::phases::Column::Hash)
                .into(),
            Self::Phases1 => Entity::belongs_to(super::phases::Entity)
                .from(Column::ShufflingHash)
                .to(super::phases::Column::Hash)
                .into(),
            Self::SelfRef => Entity::belongs_to(Entity)
                .from(Column::PreviousHash)
                .to(Column::SnapshotHash)
                .into(),
        }
    }
}

impl Related<super::games::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Games.def()
    }
}

impl Related<super::hand_configs::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::HandConfigs.def()
    }
}

impl Related<super::hands::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Hands.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
