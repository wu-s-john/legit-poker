//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.16

use super::sea_orm_active_enums::GameStatus;
use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Copy, Clone, Default, Debug, DeriveEntity)]
pub struct Entity;

impl EntityName for Entity {
    fn schema_name(&self) -> Option<&str> {
        Some("public")
    }
    fn table_name(&self) -> &str {
        "games"
    }
}

#[derive(Clone, Debug, PartialEq, DeriveModel, DeriveActiveModel, Eq, Serialize, Deserialize)]
pub struct Model {
    pub id: i64,
    pub created_at: TimeDateTimeWithTimeZone,
    pub host_player_id: i64,
    pub name: String,
    pub currency: String,
    pub max_players: i16,
    pub small_blind: i64,
    pub big_blind: i64,
    pub ante: i64,
    pub rake_bps: i16,
    pub status: GameStatus,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveColumn)]
pub enum Column {
    Id,
    CreatedAt,
    HostPlayerId,
    Name,
    Currency,
    MaxPlayers,
    SmallBlind,
    BigBlind,
    Ante,
    RakeBps,
    Status,
}

#[derive(Copy, Clone, Debug, EnumIter, DerivePrimaryKey)]
pub enum PrimaryKey {
    Id,
}

impl PrimaryKeyTrait for PrimaryKey {
    type ValueType = i64;
    fn auto_increment() -> bool {
        true
    }
}

#[derive(Copy, Clone, Debug, EnumIter)]
pub enum Relation {
    GamePlayers,
    GameShufflers,
    HandSeating,
    Hands,
    Players,
}

impl ColumnTrait for Column {
    type EntityName = Entity;
    fn def(&self) -> ColumnDef {
        match self {
            Self::Id => ColumnType::BigInteger.def(),
            Self::CreatedAt => ColumnType::TimestampWithTimeZone.def(),
            Self::HostPlayerId => ColumnType::BigInteger.def(),
            Self::Name => ColumnType::Text.def(),
            Self::Currency => ColumnType::Text.def(),
            Self::MaxPlayers => ColumnType::SmallInteger.def(),
            Self::SmallBlind => ColumnType::BigInteger.def(),
            Self::BigBlind => ColumnType::BigInteger.def(),
            Self::Ante => ColumnType::BigInteger.def(),
            Self::RakeBps => ColumnType::SmallInteger.def(),
            Self::Status => GameStatus::db_type().get_column_type().to_owned().def(),
        }
    }
}

impl RelationTrait for Relation {
    fn def(&self) -> RelationDef {
        match self {
            Self::GamePlayers => Entity::has_many(super::game_players::Entity).into(),
            Self::GameShufflers => Entity::has_many(super::game_shufflers::Entity).into(),
            Self::HandSeating => Entity::has_many(super::hand_seating::Entity).into(),
            Self::Hands => Entity::has_many(super::hands::Entity).into(),
            Self::Players => Entity::belongs_to(super::players::Entity)
                .from(Column::HostPlayerId)
                .to(super::players::Column::Id)
                .into(),
        }
    }
}

impl Related<super::game_players::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::GamePlayers.def()
    }
}

impl Related<super::game_shufflers::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::GameShufflers.def()
    }
}

impl Related<super::hand_seating::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::HandSeating.def()
    }
}

impl Related<super::hands::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Hands.def()
    }
}

impl Related<super::players::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Players.def()
    }
}

impl Related<super::shufflers::Entity> for Entity {
    fn to() -> RelationDef {
        super::game_shufflers::Relation::Shufflers.def()
    }
    fn via() -> Option<RelationDef> {
        Some(super::game_shufflers::Relation::Games.def().rev())
    }
}

impl ActiveModelBehavior for ActiveModel {}
