//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.16

use super::sea_orm_active_enums::HandStatus;
use super::sea_orm_active_enums::PhaseKind;
use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Copy, Clone, Default, Debug, DeriveEntity)]
pub struct Entity;

impl EntityName for Entity {
    fn schema_name(&self) -> Option<&str> {
        Some("public")
    }
    fn table_name(&self) -> &str {
        "hands"
    }
}

#[derive(Clone, Debug, PartialEq, DeriveModel, DeriveActiveModel, Eq, Serialize, Deserialize)]
pub struct Model {
    pub id: i64,
    pub game_id: i64,
    pub created_at: TimeDateTimeWithTimeZone,
    pub hand_no: i64,
    pub button_seat: i16,
    pub small_blind_seat: i16,
    pub big_blind_seat: i16,
    pub deck_commitment: Option<Vec<u8>>,
    pub status: HandStatus,
    pub current_sequence: i32,
    pub current_state_hash: Option<Vec<u8>>,
    pub current_phase: Option<PhaseKind>,
    pub hand_config_id: i64,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveColumn)]
pub enum Column {
    Id,
    GameId,
    CreatedAt,
    HandNo,
    ButtonSeat,
    SmallBlindSeat,
    BigBlindSeat,
    DeckCommitment,
    Status,
    CurrentSequence,
    CurrentStateHash,
    CurrentPhase,
    HandConfigId,
}

#[derive(Copy, Clone, Debug, EnumIter, DerivePrimaryKey)]
pub enum PrimaryKey {
    Id,
}

impl PrimaryKeyTrait for PrimaryKey {
    type ValueType = i64;
    fn auto_increment() -> bool {
        true
    }
}

#[derive(Copy, Clone, Debug, EnumIter)]
pub enum Relation {
    Events,
    Games,
    HandConfigs,
    HandPlayer,
    HandShufflers,
    TableSnapshots,
}

impl ColumnTrait for Column {
    type EntityName = Entity;
    fn def(&self) -> ColumnDef {
        match self {
            Self::Id => ColumnType::BigInteger.def(),
            Self::GameId => ColumnType::BigInteger.def(),
            Self::CreatedAt => ColumnType::TimestampWithTimeZone.def(),
            Self::HandNo => ColumnType::BigInteger.def(),
            Self::ButtonSeat => ColumnType::SmallInteger.def(),
            Self::SmallBlindSeat => ColumnType::SmallInteger.def(),
            Self::BigBlindSeat => ColumnType::SmallInteger.def(),
            Self::DeckCommitment => ColumnType::VarBinary(StringLen::None).def().null(),
            Self::Status => HandStatus::db_type().get_column_type().to_owned().def(),
            Self::CurrentSequence => ColumnType::Integer.def(),
            Self::CurrentStateHash => ColumnType::VarBinary(StringLen::None).def().null(),
            Self::CurrentPhase => PhaseKind::db_type()
                .get_column_type()
                .to_owned()
                .def()
                .null(),
            Self::HandConfigId => ColumnType::BigInteger.def(),
        }
    }
}

impl RelationTrait for Relation {
    fn def(&self) -> RelationDef {
        match self {
            Self::Events => Entity::has_many(super::events::Entity).into(),
            Self::Games => Entity::belongs_to(super::games::Entity)
                .from(Column::GameId)
                .to(super::games::Column::Id)
                .into(),
            Self::HandConfigs => Entity::belongs_to(super::hand_configs::Entity)
                .from(Column::HandConfigId)
                .to(super::hand_configs::Column::Id)
                .into(),
            Self::HandPlayer => Entity::has_many(super::hand_player::Entity).into(),
            Self::HandShufflers => Entity::has_many(super::hand_shufflers::Entity).into(),
            Self::TableSnapshots => Entity::has_many(super::table_snapshots::Entity).into(),
        }
    }
}

impl Related<super::events::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Events.def()
    }
}

impl Related<super::games::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Games.def()
    }
}

impl Related<super::hand_configs::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::HandConfigs.def()
    }
}

impl Related<super::hand_player::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::HandPlayer.def()
    }
}

impl Related<super::hand_shufflers::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::HandShufflers.def()
    }
}

impl Related<super::table_snapshots::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::TableSnapshots.def()
    }
}

impl Related<super::shufflers::Entity> for Entity {
    fn to() -> RelationDef {
        super::hand_shufflers::Relation::Shufflers.def()
    }
    fn via() -> Option<RelationDef> {
        Some(super::hand_shufflers::Relation::Hands.def().rev())
    }
}

impl ActiveModelBehavior for ActiveModel {}
